//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonoEngine {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class ShaderSources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ShaderSources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MonoEngine.ShaderSources", typeof(ShaderSources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 450 core
        ///
        ///layout (location = 0) in vec2 vTexCoord;
        ///layout (location = 1) in vec4 vColor;
        ///
        ///layout (location = 0) out vec4 fColor;
        ///
        ///layout (binding = 0) uniform sampler2D uTexture;
        ///
        ///void main() {
        ///    fColor = texture(uTexture, vTexCoord) * vColor;
        ///}.
        /// </summary>
        internal static string ShaderBaseFragment {
            get {
                return ResourceManager.GetString("ShaderBaseFragment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #version 450 core
        ///
        ///layout (location = 0) in vec2 aPosition;
        ///layout (location = 1) in vec2 aTexCoord;
        ///layout (location = 2) in vec4 aColor;
        ///
        ///layout (location = 0) out vec2 vTexCoord;
        ///layout (location = 1) out vec4 vColor;
        ///
        ///layout (location = 0) uniform vec2 uScreenSize;
        ///layout (location = 1) uniform float uTransform[5];
        ///
        ///vec2 Rotate(vec2 v, float r)
        ///{
        ///    const float cos = cos(r);
        ///    const float sin = sin(r);
        ///    return vec2(cos * v.x - sin * v.y, sin * v.x + cos * v.y);
        ///}
        ///
        ///vec2 ObjectToW [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ShaderBaseVertex {
            get {
                return ResourceManager.GetString("ShaderBaseVertex", resourceCulture);
            }
        }
    }
}
